// - G R A D L E - M E T R I C S
apply plugin: 'checkstyle'
apply plugin: 'pmd'

checkstyle {
    toolVersion = '8.1' // optionally specify tool version
}

pmd {
    toolVersion = '5.8.1' // optionally specify tool version
}

tasks.withType(Checkstyle) {
    ignoreFailures = true
    // REQUIRED because the plugin will report only up to the point the first issue if this is not set
    showViolations = false

    reports {
        xml.enabled = true  // REQUIRED the plugin parses xml reports so this is essential
        html.enabled = true
        html.stylesheet = resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }

    include '**/*.java'
}

tasks.withType(Pmd) {
    ignoreFailures = true
    // REQUIRED because the plugin will report only up to the point the first issue if this is not set

    reports {
        xml.enabled = true  // REQUIRED the plugin parses xml reports so this is essential
    }

    include '**/*.java'
}

// - A N D R O I D
apply plugin: 'com.android.library'
apply plugin: 'project-report'
android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 31
        versionName "4.0.0"
        project.archivesBaseName = "AndroidMVC"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "bool", "CACHE_MVC_VIEWS_ON_CONTROLLER", "true"
        }
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "bool", "CACHE_MVC_VIEWS_ON_CONTROLLER", "false"
        }
    }
    sourceSets {
        main {
            res.srcDirs += 'src/main/res-ui'
            res.srcDirs += 'src/main/res-dynamic'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        quiet true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}.aar"
            }
        }
    }
}

dependencies {
    // A N D R O I D    S U P P O R T
//    implementation 'com.android.support:support-fragment:28.0.0'
    compileOnly 'androidx.fragment:fragment:1.0.0'

    // L O C A L    L I B R A R I E S
    implementation 'me.relex:circleindicator:2.1.0'
//    compile 'com.mcxiaoke.viewpagerindicator:library:2.4.1'
//    implementation files('libs/viewpagerindicator-release.aar')
//    compileOnly files('libs/CoreBase.core-2.0.3.jar')

    // M O D U L E    D E P E N D E N C I E S
    compileOnly 'org.slf4j:slf4j-android:1.7.25'
    implementation 'joda-time:joda-time:2.3'
    implementation 'org.apache.commons:commons-lang3:3.7'

    // T E S T I N G
    testImplementation 'org.slf4j:slf4j-android:1.7.25'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'com.openpojo:openpojo:0.8.12'
    testImplementation 'org.robolectric:robolectric:4.2'

    // A N D R O I D   T E S T I N G
//    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'org.mockito:mockito-core:2.23.4'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
}
