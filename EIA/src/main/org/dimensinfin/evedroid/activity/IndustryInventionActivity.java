//	PROJECT:        EVEIndustrialist (EVEI)
//	AUTHORS:        Adam Antinoo - adamantinoo.git@gmail.com
//	COPYRIGHT:      (c) 2013-2014 by Dimensinfin Industries, all rights reserved.
//	ENVIRONMENT:		Android API11.
//	DESCRIPTION:		Application helper for Eve Online Industrialists. Will help on Industry and Manufacture.

package org.dimensinfin.evedroid.activity;

//- IMPORT SECTION .........................................................................................
import java.util.ArrayList;

import org.dimensinfin.android.mvc.activity.PagerFragment;
import org.dimensinfin.android.mvc.core.AbstractAndroidPart;
import org.dimensinfin.android.mvc.interfaces.IMenuActionTarget;
import org.dimensinfin.evedroid.activity.core.DefaultNewPagerActivity;
import org.dimensinfin.evedroid.connector.AppConnector;
import org.dimensinfin.evedroid.constant.AppWideConstants;
import org.dimensinfin.evedroid.constant.ModelWideConstants;
import org.dimensinfin.evedroid.core.EveAbstractPart;
import org.dimensinfin.evedroid.datasource.IndustryT2JobDataSource;
import org.dimensinfin.evedroid.factory.IndustryLOMResourcesDataSource;
import org.dimensinfin.evedroid.industry.JobManager;
import org.dimensinfin.evedroid.model.Action;
import org.dimensinfin.evedroid.model.NeoComBlueprint;
import org.dimensinfin.evedroid.model.EveItem;
import org.dimensinfin.evedroid.model.Skill;
import org.dimensinfin.evedroid.part.ActionPart;
import org.dimensinfin.evedroid.part.BlueprintPart;
import org.dimensinfin.evedroid.part.ItemHeader4IndustryPart;

import android.os.Bundle;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.View;
import android.widget.AdapterView;

// - CLASS IMPLEMENTATION ...................................................................................
public class IndustryInventionActivity extends DefaultNewPagerActivity implements IMenuActionTarget {
	// - S T A T I C - S E C T I O N ..........................................................................

	// - F I E L D - S E C T I O N ............................................................................

	// - C O N S T R U C T O R - S E C T I O N ................................................................

	// - M E T H O D - S E C T I O N ..........................................................................
	public void onCreateContextMenu(final ContextMenu menu, final View view, final ContextMenuInfo menuInfo) {
		Log.i("EVEI", ">> IndustryT2Activity.onCreateContextMenu"); //$NON-NLS-1$
		super.onCreateContextMenu(menu, view, menuInfo);
		if (null != menuInfo) {
			final AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
			AbstractAndroidPart part = (AbstractAndroidPart) info.targetView.getTag();
			if (part instanceof IMenuActionTarget) {
				((IMenuActionTarget) part).onCreateContextMenu(menu, view, menuInfo);
			}
		}
		Log.i("EVEI", "<< IndustryT2Activity.onCreateContextMenu"); //$NON-NLS-1$
	}

	/**
	 * This Activity requires at least two arguments, First the selected pilot but that one can be preinstalled
	 * from other activities, or not if the app was removed from memory. Second the blueprint ID that is the
	 * asset localizer for a Blueprint instance.<br>
	 * The action to be performed by the activity method are the standard for all activities:
	 * <ul>
	 * <li>It will define the initial title and subtitle for the ActionBar.</li>
	 * <li>Will read the arguments received on the extras block and from them instantiate the application data
	 * store where all global data structures will be accessible.</li>
	 * <li>If the activity makes use of the header, as is this case, it will create the part or parts that have
	 * to be visualized inside the header. That elements usually go to all the pages that the activity creates.
	 * In this particular activity the pages are the Job requirements page where the use may see the resources
	 * required to complete jobs and the LOM for manufacture building for the selected blueprint.</li>
	 * <li>It will create the corresponding fragment. Most of the instantiations will be a generic
	 * <code>PagerFragment</code>. If the cases where the fragment should implement context menus there should
	 * be a new fragment class derived from the base <code>PagerFragment</code></li>
	 * <li>The it will configure the fragment. Required parameters are the <code>identifier</code> and the
	 * <code>dataSource</code>. This last element may be made optional if we consider the default datasource the
	 * same one generated by the factory using the identifier value.</li>
	 * <li>Additional to this we can add elements to the page header. These elements are Parts of any class. Do
	 * not forget to setup the correct renderer code for the presentation variant.</li>
	 * </ul>
	 * The instantiation and configuration will make use of the Activity bundle extras. Those extras are the
	 * parametrization parameters for the Activity and are mostly required if we need the Activity to be
	 * reinstantiable and do not broke when the application is removed from memory.
	 */
	protected void onCreate(final Bundle savedInstanceState) {
		Log.i("EVEI", ">> IndustryT2Activity.onCreate"); //$NON-NLS-1$
		super.onCreate(savedInstanceState);
		// Set the initial title and subtitle.
		_actionBar.setTitle("Industry");
		_actionBar.setSubtitle("T2 Manufacture");
		try {
			// Instantiate the blueprint from the ID.
			Bundle extras = getIntent().getExtras();
			long bpassetid = extras.getLong(AppWideConstants.extras.EXTRA_BLUEPRINTID);
			if (bpassetid > 0) {
				NeoComBlueprint blueprint = _store.getPilot().getAssetsManager().searchBlueprintByID(bpassetid);
				if (null == blueprint)
					throw new RuntimeException(
							"RT IndustryT2Activity.onCreate - Unable to continue. Expected blueprint not located.");

				// Initialize the list of assets with the real assets and then remove the resources used by the pending jobs.
				JobManager.initializeAssets(_store.getPilot());
				// Create the key element for this activity. All data to be shown comes from this single element.
				BlueprintPart bppart = new BlueprintPart(blueprint);
				// Initialize the blueprint job actions to get the right analytics values.
				if (bppart.getChildren().size() < 1) {
					ArrayList<Action> actions = bppart.generateManufactureActions4Blueprint();
					for (Action action : actions) {
						ActionPart apart = new ActionPart(action);
						if (action instanceof Skill) apart.setRenderMode(AppWideConstants.rendermodes.RENDER_SKILLACTION);
						apart.createHierarchy();
						bppart.addChild(apart);
					}
				}

				// Create the Manufacture Job Page.
				// If fragment already registered then do not create a new instance.
				PagerFragment frag = (PagerFragment) getFragmentManager().findFragmentByTag(
						Integer.valueOf(AppWideConstants.fragment.FRAGMENT_INDUSTRYJOBRESOURCES).toString());
				if (null == frag) {
					frag = new PagerFragment();
					frag.setIdentifier(AppWideConstants.fragment.FRAGMENT_INDUSTRYJOBRESOURCES);
					frag.setTitle("Industry");
					// Set the subtitle depending on the blueprint Tech.
					String tech = blueprint.getTech();
					if (tech.equalsIgnoreCase(ModelWideConstants.eveglobal.TechI)) {
						_actionBar.setSubtitle("T1 Manufacture - Job");
						frag.setSubtitle("T1 Manufacture - Job");
					}
					if (tech.equalsIgnoreCase(ModelWideConstants.eveglobal.TechII)) {
						_actionBar.setSubtitle("T2 Manufacture - Job");
						frag.setSubtitle("T2 Manufacture - Job");
					}
					if (tech.equalsIgnoreCase(ModelWideConstants.eveglobal.TechIII)) {
						_actionBar.setSubtitle("T3 Manufacture - Job");
						frag.setSubtitle("T3 Manufacture - Job");
					}
					this.getFragmentManager().beginTransaction()
							.add(frag, Integer.valueOf(AppWideConstants.fragment.FRAGMENT_INDUSTRYJOBRESOURCES).toString()).commit();
				}
				IndustryT2JobDataSource ds = new IndustryT2JobDataSource(_store);
				ds.setBlueprint(bppart);
				frag.setDataSource(ds);
				frag.clearHeader();
				frag.addtoHeader((EveAbstractPart) bppart
						.setRenderMode(AppWideConstants.rendermodes.RENDER_BLUEPRINTINDUSTRYHEADER));
				_pageAdapter.addPage(frag);

				// Create the Manufacture Resources Page.
				// Get the module also from the blueprint.
				int moduleid = blueprint.getModuleTypeID();
				EveItem module = AppConnector.getDBConnector().searchItembyID(moduleid);
				frag = (PagerFragment) getFragmentManager().findFragmentByTag(
						Integer.valueOf(AppWideConstants.fragment.FRAGMENT_ITEMMODULERESOURCES).toString());
				if (null == frag) {
					frag = new PagerFragment();
					frag.setIdentifier(AppWideConstants.fragment.FRAGMENT_ITEMMODULERESOURCES);
					frag.setTitle("Industry");
					// Set the subtitle depending on the module tech.
					if (module.getTech().equalsIgnoreCase(ModelWideConstants.eveglobal.TechI))
						frag.setSubtitle("T1 Manufacture - Resources");
					if (module.getTech().equalsIgnoreCase(ModelWideConstants.eveglobal.TechII))
						frag.setSubtitle("T2 Manufacture - Resources");
					if (module.getTech().equalsIgnoreCase(ModelWideConstants.eveglobal.TechIII))
						frag.setSubtitle("T3 Manufacture - Resources");
					this.getFragmentManager().beginTransaction()
							.add(frag, Integer.valueOf(AppWideConstants.fragment.FRAGMENT_ITEMMODULERESOURCES).toString()).commit();
				}
				IndustryLOMResourcesDataSource ds2 = new IndustryLOMResourcesDataSource(_store);
				frag.setDataSource(ds2);
				ds2.setItem(module);
				frag.setListCallback(this);
				frag.clearHeader();
				frag.addtoHeader(new ItemHeader4IndustryPart(module));
				_pageAdapter.addPage(frag);
			} else
				throw new RuntimeException(
						"RT IndustryT2Activity.onCreate - Unable to continue. Required parameters not defined on Extras.");
		} catch (Exception rtex) {
			logger.severe("R> Runtime Exception on IndustryT2Activity.onCreate." + rtex.getMessage());
			rtex.printStackTrace();
			stopActivity(rtex);
		}
		Log.i("EVEI", "<< IndustryT2Activity.onCreate"); //$NON-NLS-1$
	}

	/**
	 * Save the store to their persistent file before releasing the control to another activity that will then
	 * be able to make use of that data structures.
	 */
	protected void onPause() {
		Log.i("DirectorsBoardActivity", ">> DirectorsBoardActivity.onPause");
		// Check store state and update cache on disk if it has changed.
		if (_store.isDirty()) _store.save();
		super.onPause();
		Log.i("DirectorsBoardActivity", "<< DirectorsBoardActivity.onPause");
	}

	@Override
	protected void onSaveInstanceState(final Bundle savedInstanceState) {
		Log.i("IndustryDirectorActivity", ">> IndustryDirectorActivity.onSaveInstanceState"); //$NON-NLS-1$
		super.onSaveInstanceState(savedInstanceState);
		// Add current model data dependencies. EVECHARACTERID
		savedInstanceState.putLong(AppWideConstants.extras.EXTRA_EVECHARACTERID, _store.getPilot().getCharacterID());
		_store.save();
		Log.i("IndustryDirectorActivity", "<< IndustryDirectorActivity.onSaveInstanceState"); //$NON-NLS-1$
	}
}
//- UNUSED CODE ............................................................................................
